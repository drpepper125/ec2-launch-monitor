AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Launch Monitor - Serverless monitoring of EC2 instance launches with Lambda function'

Parameters:
  LambdaCodeBucket:
    Type: String
    Description: 'S3 bucket containing the Lambda function code'
    
  LambdaCodeKey:
    Type: String
    Description: 'S3 key for the Lambda function zip file'
    Default: 'lambda-code.zip'

  AllowedIPAddress:
    Type: String
    Description: 'Your IP address to allow access (e.g., 203.0.113.0/32). Replace with your actual IP address.'
    Default: '0.0.0.0/0'  # WARNING: This allows access from anywhere. Replace with your IP!
  

Resources:
  # S3 bucket for static review board files AND CSV reports
  StaticReviewBoardBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'static-review-board-${AWS::AccountId}-${AWS::Region}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldReports
            Status: Enabled
            ExpirationInDays: 90  # Keep reports for 90 days
            Prefix: data/  # Only delete files in data/ folder
        
  # Bucket policy to allow public read access for static website
  StaticReviewBoardBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: StaticReviewBoardBucket
    Properties:
      Bucket: !Ref StaticReviewBoardBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: RestrictToSpecificIP
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${StaticReviewBoardBucket}/*'
            Condition:
              IpAddress:
                aws:SourceIp: !Ref AllowedIPAddress
        

  # IAM Role for Lambda Function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EC2MonitoringPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:GetCallerIdentity
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeRegions
                  - ec2:DescribeAvailabilityZones
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:GetObject
                Resource: !Sub 'arn:aws:s3:::static-review-board-${AWS::AccountId}-${AWS::Region}/*'

  # Lambda Function
  EC2LaunchMonitorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ec2-launch-monitor
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaCodeBucket
        S3Key: !Ref LambdaCodeKey
      Description: 'Monitors EC2 instance launches and processes events'
      Timeout: 60
      Environment:
        Variables:
          REPORTS_BUCKET: !Ref StaticReviewBoardBucket

  # CloudWatch Events Rule to detect EC2 launches
  EC2LaunchRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ec2-launch-monitor-rule
      Description: 'Detects when EC2 instances are launched'
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventName:
            - RunInstances
          eventSource:
            - ec2.amazonaws.com
      State: ENABLED
      Targets:
        - Arn: !GetAtt EC2LaunchMonitorFunction.Arn
          Id: EC2LaunchTarget

  # Permission for CloudWatch Events to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref EC2LaunchMonitorFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2LaunchRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the EC2 Launch Monitor Lambda Function'
    Value: !GetAtt EC2LaunchMonitorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'
    
  EventRuleArn:
    Description: 'ARN of the CloudWatch Events Rule'
    Value: !GetAtt EC2LaunchRule.Arn
    Export:
      Name: !Sub '${AWS::StackName}-EventRuleArn'
    
  IAMRoleArn:
    Description: 'ARN of the Lambda Execution Role'
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-IAMRoleArn'

  StaticReviewBoardBucketName:
    Description: 'Name of the S3 bucket for static website and CSV reports'
    Value: !Ref StaticReviewBoardBucket
    Export:
      Name: !Sub '${AWS::StackName}-StaticReviewBoardBucket'
      
  StaticWebsiteURL:
    Description: 'URL of the private static review board website (IP restricted)'
    Value: !Sub 'http://${StaticReviewBoardBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'
